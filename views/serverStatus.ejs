<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Server Status</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    .status-dot {
      width: 12px;
      height: 12px;
      border-radius: 50%;
      display: inline-block;
      animation: pulse 1.5s infinite;
      vertical-align: middle; /* Ensures proper alignment with text */
    }
  
    @keyframes pulse {
      0% { transform: scale(1); opacity: 1; }
      50% { transform: scale(1.5); opacity: 0.6; }
      100% { transform: scale(1); opacity: 1; }
    }
  
    .dot-online { background-color: #22c55e; } /* Green */
    .dot-maintenance, .dot-construction { background-color: #facc15; } /* Yellow */
    .dot-offline { background-color: #ef4444; } /* Red */
  </style>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen">
  <div class="bg-white p-8 rounded-lg shadow-md w-full max-w-md space-y-6">
    <!-- Server Status Heading with Status Dot -->
    <h1 class="text-2xl font-bold text-center mb-6 flex items-center justify-center">
      <span>Server Status</span>
      <span id="statusDot" class="status-dot ml-2"></span>
    </h1>

    <!-- Form -->
    <form id="statusForm" class="space-y-4">
      <!-- Server Dropdown -->
      <div>
        <label for="server" class="block text-sm font-medium text-gray-700">Server</label>
        <select id="server" name="server" required class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
          <% Object.keys(serverStatus).forEach(server => { %>
            <option value="<%= server %>"><%= server.charAt(0).toUpperCase() + server.slice(1) %></option>
          <% }) %>
        </select>
      </div>

      <!-- Dynamic Status Dropdown -->
      <div>
        <label for="status" class="block text-sm font-medium text-gray-700">Mode</label>
        <select id="status" name="status" required class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
          <!-- Options will be dynamically populated -->
        </select>
      </div>

      <!-- Open Link Button -->
      <div>
        <button type="button" id="openLinkButton" class="w-full bg-green-600 text-white py-2 px-4 rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
          Open Selected Server
        </button>
      </div>

      <!-- Submit Button -->
      <button type="submit" class="w-full bg-indigo-600 text-white py-2 px-4 rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
        Update Mode
      </button>
    </form>

    <!-- Response Display -->
    <div id="responseMessage" class="hidden mt-4 p-4 rounded-md text-sm" role="alert"></div>
  </div>

  <!-- JavaScript Logic -->
  <script>
    const serverStatus = <%- JSON.stringify(serverStatus) %>;
    const allowedStatuses = <%- JSON.stringify(allowedStatuses) %>;

    const serverDropdown = document.getElementById('server');
    const statusDropdown = document.getElementById('status');
    const openLinkButton = document.getElementById('openLinkButton');
    const responseMessage = document.getElementById('responseMessage');
    const statusForm = document.getElementById('statusForm');
    const statusDot = document.getElementById('statusDot');

    function updateStatusDot() {
      const selectedServer = serverDropdown.value;
      const currentStatus = serverStatus[selectedServer];

      statusDot.classList.remove('dot-online', 'dot-maintenance', 'dot-construction', 'dot-offline');

      if (currentStatus === 'online') {
        statusDot.classList.add('dot-online');
      } else if (currentStatus === 'maintenance' || currentStatus === 'construction') {
        statusDot.classList.add('dot-maintenance'); // Yellow for both
      } else {
        statusDot.classList.add('dot-offline');
      }
    }

    function populateStatusDropdown() {
      const selectedServer = serverDropdown.value;
      const currentStatus = serverStatus[selectedServer];
      const allowedOptions = allowedStatuses[selectedServer];

      statusDropdown.innerHTML = '';

      allowedOptions.forEach(status => {
        const option = document.createElement('option');
        option.value = status;
        option.textContent = status.charAt(0).toUpperCase() + status.slice(1);
        option.selected = status === currentStatus;
        statusDropdown.appendChild(option);
      });

      updateStatusDot();
    }

    populateStatusDropdown();
    serverDropdown.addEventListener('change', populateStatusDropdown);
    statusDropdown.addEventListener('change', updateStatusDot);

    openLinkButton.addEventListener('click', () => {
      const selectedServer = serverDropdown.value;

      const serverLinks = {
        'control-panel': 'https://control.savishkaara.in',
        'website': 'https://savishkaara.in',
        'snacktrack': 'https://snacktrack.savishkaara.in',
      };

      if (serverLinks[selectedServer]) {
        window.open(serverLinks[selectedServer], '_blank');
      } else {
        alert('No link available for the selected server.');
      }
    });

    statusForm.addEventListener('submit', async (e) => {
      e.preventDefault();

      const selectedServer = serverDropdown.value;
      const selectedStatus = statusDropdown.value;

      try {
        const response = await fetch('/api/server-update', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            server: selectedServer,
            status: selectedStatus,
          }),
        });

        const result = await response.json();

        responseMessage.textContent = `Response: ${result.message}`;
        responseMessage.classList.remove('hidden');
        responseMessage.classList.add('bg-green-100', 'border', 'border-green-400', 'text-green-700');

        serverStatus[selectedServer] = selectedStatus;
        populateStatusDropdown();
      } catch (error) {
        responseMessage.textContent = 'Error: Failed to update server status.';
        responseMessage.classList.remove('hidden');
        responseMessage.classList.add('bg-red-100', 'border', 'border-red-400', 'text-red-700');
      }
    });
  </script>
</body>
</html>
